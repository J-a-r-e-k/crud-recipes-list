{"version":3,"sources":["components/Recipe.tsx","components/AddRecipeForm.tsx","components/EditRecipeForm.tsx","utils/Storage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Recipe","props","recipe","destroyRecipe","editRecipe","_useState","useState","_useState2","Object","slicedToArray","collapsing","setCollapsing","react_default","a","createElement","className","onClick","title","ingredients","split","map","value","key","id","AddRecipeForm","createRecipe","close","setRecipe","handleChange","e","_e$target","target","name","objectSpread","defineProperty","onSubmit","onChange","placeholder","type","EditRecipeForm","currentRecipe","updateRecipe","Storage","get","output","JSON","parse","localStorage","getItem","setItem","set","stringify","App","recipesData","recipes","setRecipes","_useState3","_useState4","editing","setEditing","_useState5","_useState6","creating","setCreating","_useState7","_useState8","setCurrentRecipe","useEffect","filter","components_Recipe","components_AddRecipeForm","uuid","concat","toConsumableArray","components_EditRecipeForm","updatedRecipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a3e7515.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface IRecipe {\n    id: string;\n    title: string;\n    ingredients: string;\n}\n\ninterface IRecipeProps {\n    recipe: IRecipe;\n    editRecipe: (recipe: IRecipe) => void;\n    destroyRecipe: (id: String) => void;\n}\n\nconst Recipe = (props: IRecipeProps) => {\n\n    const { recipe, destroyRecipe, editRecipe } = props;\n\n    const [collapsing, setCollapsing] = useState<Boolean>(false);\n\n    const renderIngredients = () => {\n        return recipe.ingredients.split(',').map((value, key) => {\n            return value ? <li key={key}>{value}</li> : '';\n        });\n    };\n\n    return (\n        <div className=\"recipe\">\n            <div onClick={() => setCollapsing(!collapsing)} className=\"recipe__title\">\n                {recipe.title}\n            </div>\n            <div className={collapsing ? 'recipe__content' : 'hidden'}>\n                <div className=\"ingredients\">\n                    <div className=\"ingredients__title\">Ingredients</div>\n                    <ul className=\"ingredients__list\">\n                        {renderIngredients()}\n                    </ul>\n                </div>\n                <button onClick={() => destroyRecipe(recipe.id)} className=\"btn btn--danger\">Delete</button>\n                <button onClick={() => editRecipe(recipe)} className=\"btn\">Edit</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Recipe;\n","import React, { useState } from 'react';\n\ninterface IRecipe {\n    id: string;\n    title: string;\n    ingredients: string;\n}\n\ninterface IRecipeFormProps {\n    createRecipe: (recipe: IRecipe) => void;\n    close: () => void;\n}\n\nconst AddRecipeForm = (props: IRecipeFormProps) => {\n\n    const { createRecipe, close } = props;\n\n    const [recipe, setRecipe] = useState<IRecipe>({\n        id: '',\n        title: '',\n        ingredients: ''\n    });\n\n    const handleChange = (e: React.ChangeEvent<any>) => {\n        const { name, value } = e.target\n        setRecipe({ ...recipe, [name]: value })\n    };\n\n    return (\n        <form onSubmit={() => createRecipe(recipe)} className=\"recipeForm\">\n            <div className=\"recipeForm__header\">\n                Add a Recipe\n            </div>\n            <div className=\"recipeForm__content\">\n                <div>\n                    <label>Recipe</label>\n                    <input value={recipe.title} onChange={handleChange} name=\"title\" placeholder=\"Recipe Name\" />\n                </div>\n                <div>\n                    <label>Ingredients</label>\n                    <textarea value={recipe.ingredients} onChange={handleChange} name=\"ingredients\" placeholder=\"Enter Ingredients,Separated,By Commas\" />\n                </div>\n            </div>\n            <div className=\"recipeForm__footer\">\n                <button type=\"submit\" className=\"btn btn--primary\">Add Recipe</button>\n                <button onClick={close} type=\"button\" className=\"btn\">Close</button>\n            </div>\n        </form>\n    )\n}\n\nexport default AddRecipeForm;\n","import React, { useState } from 'react';\n\ninterface IRecipe {\n    id: string;\n    title: string;\n    ingredients: string;\n}\n\ninterface IRecipeFormProps {\n    currentRecipe: IRecipe;\n    updateRecipe: (id: String, recipe: IRecipe) => void;\n    close: () => void;\n}\n\nconst EditRecipeForm = (props: IRecipeFormProps) => {\n\n    const { currentRecipe, updateRecipe, close } = props;\n\n    const [recipe, setRecipe] = useState<IRecipe>(currentRecipe);\n\n    const handleChange = (e: React.ChangeEvent<any>) => {\n        const { name, value } = e.target\n        setRecipe({ ...recipe, [name]: value })\n    };\n\n    return (\n        <form onSubmit={() => updateRecipe(recipe.id, recipe)} className=\"recipeForm\">\n            <div className=\"recipeForm__header\">\n                Edit Recipe\n            </div>\n            <div className=\"recipeForm__content\">\n                <div>\n                    <label>Recipe</label>\n                    <input value={recipe.title} onChange={handleChange} name=\"title\" placeholder=\"Recipe Name\" />\n                </div>\n                <div>\n                    <label>Ingredients</label>\n                    <textarea value={recipe.ingredients} onChange={handleChange} name=\"ingredients\" placeholder=\"Enter Ingredients,Separated,By Commas\" />\n                </div>\n            </div>\n            <div className=\"recipeForm__footer\">\n                <button type=\"submit\" className=\"btn btn--primary\">Edit Recipe</button>\n                <button onClick={close} type=\"button\" className=\"btn\">Close</button>\n            </div>\n        </form>\n    )\n}\n\nexport default EditRecipeForm;\n","const Storage = {\n    get: (key: string) => {\n        let output = [];\n        try {\n            output = JSON.parse(localStorage.getItem(key) || '[]');\n        } catch (e) {\n            localStorage.setItem(key, '[]');\n        }\n        return output;\n    },\n    set: (key: string, value: any) => {\n        return localStorage.setItem(key, JSON.stringify(value));\n    }\n}\n\nexport default Storage;","import React, { useState, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nimport Recipe from './components/Recipe';\nimport AddRecipeForm from './components/AddRecipeForm';\nimport EditRecipeForm from './components/EditRecipeForm';\nimport Storage from './utils/Storage';\n\ninterface IRecipe {\n  id: string;\n  title: string;\n  ingredients: string;\n}\n\nconst App = () => {\n\n  const recipesData: IRecipe[] = Storage.get('recipes');\n  const [recipes, setRecipes] = useState<IRecipe[]>(recipesData);\n  const [editing, setEditing] = useState<Boolean>(false);\n  const [creating, setCreating] = useState<Boolean>(false);\n  const [currentRecipe, setCurrentRecipe] = useState<IRecipe>({\n    id: \"\",\n    title: \"\",\n    ingredients: \"\"\n  });\n\n  useEffect(() => {\n    Storage.set('recipes', recipes);\n  }, [recipes]);\n\n  const createRecipe = (recipe: IRecipe) => {\n    setCreating(false);\n    recipe.id = uuid();\n    setRecipes([...recipes, recipe]);\n  };\n\n  const editRecipe = (recipe: IRecipe) => {\n    setEditing(true);\n    setCurrentRecipe({\n      id: recipe.id,\n      title: recipe.title,\n      ingredients: recipe.ingredients\n    });\n  };\n\n  const updateRecipe = (id: String, updatedRecipe: IRecipe) => {\n    setEditing(false);\n    setRecipes(recipes.map(recipe => (recipe.id === id ? updatedRecipe : recipe)));\n  };\n\n  const destroyRecipe = (id: String) => {\n    setRecipes(recipes.filter(recipe => recipe.id !== id))\n  };\n\n  return (\n    <div className=\"recipesList\">\n      <div className=\"recipesList__content\">\n        {recipes.map(value => {\n          return <Recipe key={value.id} recipe={value} editRecipe={editRecipe} destroyRecipe={destroyRecipe} />\n        })}\n      </div>\n      <button onClick={() => setCreating(true)} className=\"btn btn--primary btn--big\">Add Recipe</button>\n      {creating ? (\n        <AddRecipeForm createRecipe={createRecipe} close={() => setCreating(false)} />\n      ) : ''}\n      {editing ? (\n        <EditRecipeForm currentRecipe={currentRecipe} updateRecipe={updateRecipe} close={() => setEditing(false)} />\n      ) : ''}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}